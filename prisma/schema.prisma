// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Elderly {
  id             String           @id @default(uuid())
  cpf            String           @unique
  name           String
  email          String           @default("")
  dateOfBirth    DateTime
  phone          String
  contacts       ElderlyContact[]
  address        Address          @relation(fields: [addressId], references: [id])
  addressId      String
  sex            String
  weight         Float
  height         Float
  imc            Float
  education      String
  socialeconomic String
  user           User             @relation(fields: [userId], references: [id])
  userId         String           @unique
  created        DateTime         @default(now())
  updated        DateTime         @updatedAt
}

model Address {
  id           String    @id @default(uuid())
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  zipCode      String
  Elderly      Elderly[]
  Contact      Contact[]
  created      DateTime  @default(now())
  updated      DateTime  @updatedAt
}

model Contact {
  id        String           @id @default(uuid())
  name      String
  phone     String
  email     String
  cpf       String           @unique
  address   Address          @relation(fields: [addressId], references: [id])
  addressId String
  elderly   ElderlyContact[]
  created   DateTime         @default(now())
  updated   DateTime         @updatedAt
}

model ElderlyContact {
  elderlyId String
  contactId String
  elderly   Elderly @relation(fields: [elderlyId], references: [id])
  contact   Contact @relation(fields: [contactId], references: [id])

  @@id([elderlyId, contactId])
}

model Professional {
  id      String   @id @default(uuid())
  cpf     String   @unique
  name    String
  phone   String
  email   String
  user    User     @relation(fields: [userId], references: [id])
  userId  String   @unique
  created DateTime @default(now())
  updated DateTime @updatedAt
}

model Question {
  id          String       @id @default(uuid())
  title       String
  description String
  type        QuestionType
  created     DateTime     @default(now())
  updated     DateTime     @updatedAt
  options     Option[]

  QuestionAnswer QuestionAnswer[]
}

model Option {
  id          String   @id @default(uuid())
  description String
  question    Question @relation(fields: [questionId], references: [id])
  questionId  String
  created     DateTime @default(now())
  updated     DateTime @updatedAt

  OptionAnswer OptionAnswer[]
}

model OptionAnswer {
  id               String         @id @default(uuid())
  score            Int
  answerText       String?
  answerNumber     Float?
  answerBoolean    Boolean?
  option           Option         @relation(fields: [optionId], references: [id])
  optionId         String
  questionAnswer   QuestionAnswer @relation(fields: [questionAnswerId], references: [id])
  questionAnswerId String
  created          DateTime       @default(now())
  updated          DateTime       @updatedAt
}

model QuestionAnswer {
  id            String         @id @default(uuid())
  question      Question       @relation(fields: [questionId], references: [id])
  questionId    String
  answerText    String?
  answerNumber  Float?
  answerImage   String?
  score         Int?
  created       DateTime       @default(now())
  updated       DateTime       @updatedAt
  optionAnswers OptionAnswer[]
}

model User {
  id                 String        @id @default(uuid())
  login              String        @unique
  name               String?
  email              String        @default("")
  password           String
  userType           UserType      @default(USER)
  resetToken         String?
  resetTokenExpiry   DateTime?
  mustChangePassword Boolean       @default(true)
  created            DateTime      @default(now())
  updated            DateTime      @updatedAt
  elderly            Elderly?
  professional       Professional?
}

enum UserType {
  ADMIN
  USER
  TECH_PROFESSIONAL
}

enum QuestionType {
  TEXT
  NUMBER
  OPTION
  IMAGE
  SELECT
  MULTISELECT
  BOOLEAN
}
